%% Stirling Engine Cycle Problem

clear; clc; close all;

%% Functions


%% Piston Postiion
function pistonPosition = calculatePistonPosition(crankAngle, crankLength, rodLength)
    % Position is relative to bottom dead center (BDC)
    beta = asin(crankLength * sin(crankAngle) / rodLength);
    pistonPosition = rodLength * cos(beta)-crankLength*cos(crankAngle);
end

function coldVol = calculateColdVolume(crankAngle, params)
    % Calculate piston positions
    powerPistonPos = calculatePistonPosition(crankAngle, params.powerCrankLength, params.powerRodLength);
    displacerPos = calculatePistonPosition(crankAngle + params.phaseShift, params.displacerCrankLength, params.displacerRodLength);
    
    % Calculate cold side height
    % Distance between displacer and power piston, minus powerPinToPistonTop, minus half displacer height
    coldVol.height = (displacerPos - powerPistonPos) - params.powerPinToPistonTop - (params.displacerHeight / 2);
    
    % Calculate cold volume
    coldVol.volume = params.cylinderCrossSectionalArea * coldVol.height;
    
    % Ensure volume is non-negative
    coldVol.volume = max(coldVol.volume, 0);
end

function hotVol = calculateHotVolume(crankAngle, params)
%CALCULATEHOTVOLUME Calculate hot side volume
%   Inputs:
%       crankAngle - Crank angle in radians
%       params - Structure containing engine parameters
%   Output:
%       hotVol - Structure containing hot volume data
%           hotVol.volume - Hot side volume in m³
%           hotVol.height - Hot side height in m

    % Calculate piston positions
    powerPistonPos = calculatePistonPosition(crankAngle, params.powerCrankLength, params.powerRodLength);
    displacerPos = calculatePistonPosition(crankAngle + params.phaseShift, params.displacerCrankLength, params.displacerRodLength);
    
    % Calculate cold side height (same as in calculateColdVolume)
    coldHeight = (displacerPos - powerPistonPos) - params.powerPinToPistonTop - (params.displacerHeight / 2);
    
    % Calculate hot side height
    % Hot height = ColdHotHeight - cold height
    hotVol.height = params.ColdHotHeight - coldHeight;
    
    % Calculate hot volume
    hotVol.volume = params.cylinderCrossSectionalArea * hotVol.height;
    
    % Ensure volume is non-negative
    hotVol.volume = max(hotVol.volume, 0);
end

%% Prescribed Parameters

% ============== GEOMETRY PARAMETERS ==============

% Power Piston
params.powerCrankLength = 0.025;              % m - Crank radius
params.powerRodLength = 0.075;                % m - Connecting rod length
params.powerPinToPistonTop = 0.005;           % m - Pin to piston distance

% Displacer
params.displacerCrankLength = 0.020;          % m - Crank radius
params.displacerRodLength = 0.140;            % m - Connecting rod length
params.displacerVolume = 4e-5;                % m³ - Displacer volume

% Cylinder
params.cylinderBore = 0.050;                  % m - Bore diameter



% ============== OPERATING CONDITIONS ==============

% Kinematics
params.phaseShift = pi/2;                     % rad - Phase angle (90°)
params.averageRPM = 650;                      % RPM - Operating speed

% Thermodynamics
params.hotTemperature = 900;                  % K - Hot space temperature
params.coldTemperature = 300;                 % K - Cold space temperature

% Pressure
params.pressureAtBDC = 500e3;                 % Pa - Pressure at bottom dead center
params.atmosphericPressure = 101.3e3;         % Pa - Atmospheric pressure


% ============== DEAD VOLUMES ==============

params.compressionRatio = 1.7;                % Given compression ratio
params.regeneratorVolume = 2e-5;              % m³ - Given regenerator volume


% ============== WORKING FLUID (AIR) ==============

params.gasConstant = 287;                     % J/(kg·K) - Specific gas constant
params.gasGamma = 1.4;                        % - Heat capacity ratio
params.gasName = 'Air';


% ============== FLYWHEEL SPECIFICATIONS ==============

params.flywheelWidth = 0.025;                 % m - Flywheel width
params.flywheelRimThickness = 0.050;          % m - Rim thickness
params.flywheelMaterialDensity = 7750;        % kg/m³ - 304 Stainless Steel
params.flywheelCoefficientOfFluctuation = 0.003;  % - Target Cs value

% ============== SIMULATION PARAMETERS ==============

params.simulationPointsPerCycle = 360;        % Points per cycle
params.simulationCycles = 3;                  % Number of cycles
params.simulationTolerance = 1e-6;            % Convergence tolerance


%% Assisting Calculations

% Cylinder cross-sectional area
params.cylinderCrossSectionalArea = pi/4*(params.cylinderBore)^2;

% Displacer GEOMETRY
params.displacerHeight = params.displacerVolume / params.cylinderCrossSectionalArea;

% Calculate power piston positions at BDC and TDC
params.powerPistonPosBDC = calculatePistonPosition(0, params.powerCrankLength, params.powerRodLength);  % 0 radians = BDC
params.powerPistonPosTDC = calculatePistonPosition(pi, params.powerCrankLength, params.powerRodLength);  % π radians = TDC

% Calculate swept volume (volume displaced by power piston)
params.powerSweptVolume = params.cylinderCrossSectionalArea * (params.powerPistonPosTDC - params.powerPistonPosBDC);

% Calculate total volume at BDC (9.23 Pg 2) (Also V_MAX)
params.totalVolumeBDC = params.regeneratorVolume - params.displacerVolume + ( params.compressionRatio * params.powerSweptVolume ) / ( params.compressionRatio - 1 ) ;

%Total cylinder height (crank pin to cylinder roof)
params.ColdHotHeight = params.totalVolumeBDC / params.cylinderCrossSectionalArea;
params.totalCylinderHeight = params.ColdHotHeight + params.displacerHeight + params.powerPinToPistonTop + params.powerRodLength -params.powerCrankLength;














%% Test Animation - Piston Positions and Volume Analysis

% Create crank angle array for one complete cycle
theta = linspace(0, 2*pi, params.simulationPointsPerCycle);

% Initialize arrays for storage
powerPistonPos = zeros(size(theta));
displacerPos = zeros(size(theta));
totalVolume = zeros(size(theta));
hotVolume = zeros(size(theta));
coldVolume = zeros(size(theta));
regeneratorVolume = params.regeneratorVolume * ones(size(theta));

% Calculate positions and volumes for each crank angle
for i = 1:length(theta)
    % Calculate piston positions
    powerPistonPos(i) = calculatePistonPosition(theta(i), params.powerCrankLength, params.powerRodLength);
    displacerPos(i) = calculatePistonPosition(theta(i) + params.phaseShift, params.displacerCrankLength, params.displacerRodLength);
    
    % Calculate volumes
    coldVol = calculateColdVolume(theta(i), params);
    hotVol = calculateHotVolume(theta(i), params);
    
    coldVolume(i) = coldVol.volume;
    hotVolume(i) = hotVol.volume;
    totalVolume(i) = coldVolume(i) + hotVolume(i) + regeneratorVolume(i);
end

% Create animation figure
figure('Name', 'Stirling Engine Volume Analysis', 'Position', [100, 100, 1400, 900]);

% Subplot 1: Piston Positions vs Crank Angle
subplot(2,3,1);
plot(theta*180/pi, powerPistonPos*1000, 'b-', 'LineWidth', 2, 'DisplayName', 'Power Piston');
hold on;
plot(theta*180/pi, displacerPos*1000, 'r-', 'LineWidth', 2, 'DisplayName', 'Displacer');
xlabel('Crank Angle (degrees)');
ylabel('Position (mm)');
title('Piston Positions vs Crank Angle');
legend('Location', 'best');
grid on;

% Subplot 2: Volume vs Crank Angle
subplot(2,3,2);
plot(theta*180/pi, totalVolume*1e6, 'k-', 'LineWidth', 2, 'DisplayName', 'Total Volume');
hold on;
plot(theta*180/pi, hotVolume*1e6, 'r-', 'LineWidth', 2, 'DisplayName', 'Hot Volume');
plot(theta*180/pi, coldVolume*1e6, 'b-', 'LineWidth', 2, 'DisplayName', 'Cold Volume');
plot(theta*180/pi, regeneratorVolume*1e6, 'g-', 'LineWidth', 2, 'DisplayName', 'Regenerator Volume');
xlabel('Crank Angle (degrees)');
ylabel('Volume (cm³)');
title('Volumes vs Crank Angle');
legend('Location', 'best');
grid on;